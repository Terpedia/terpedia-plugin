name: Deploy Terpedia Plugin to Production

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup PHP for version management
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        
    - name: Validate plugin version
      run: |
        echo "🔍 Validating plugin version before deployment..."
        
        # Extract version from plugin header
        PLUGIN_VERSION=$(grep "Version:" terpedia.php | head -1 | sed 's/.*Version: *//' | tr -d ' ')
        VERSION_FILE=$(cat VERSION 2>/dev/null || echo "not found")
        
        echo "📦 Plugin header version: $PLUGIN_VERSION"
        echo "📄 VERSION file content: $VERSION_FILE"
        
        # Validate version format (semantic versioning)
        if [[ $PLUGIN_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "✅ Plugin version format is valid: $PLUGIN_VERSION"
        else
          echo "❌ Invalid plugin version format: $PLUGIN_VERSION"
          echo "Expected format: X.Y.Z (e.g., 3.11.13)"
          exit 1
        fi
        
        # Check if VERSION file matches plugin header
        if [ "$PLUGIN_VERSION" = "$VERSION_FILE" ]; then
          echo "✅ VERSION file matches plugin header: $PLUGIN_VERSION"
        else
          echo "⚠️ VERSION file mismatch:"
          echo "  Plugin header: $PLUGIN_VERSION"
          echo "  VERSION file: $VERSION_FILE"
          echo "Continuing with plugin header version..."
        fi
        
        # Set version as environment variable for later steps
        echo "TERPEDIA_VERSION=$PLUGIN_VERSION" >> $GITHUB_ENV
        echo "TERPEDIA_VERSION_FILE=$VERSION_FILE" >> $GITHUB_ENV
        
        echo "🎯 Version validation completed successfully"
        
    - name: Bump version automatically
      run: |
        echo "Current version: $(php version-manager.php current)"
        new_version=$(php version-manager.php increment patch)
        echo "New version: $new_version"
        
    - name: Commit version bump
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add terpedia.php VERSION
        git commit -m "Bump plugin version to $(php version-manager.php current)" || exit 0
        git push origin main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Setup SSH Agent
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        log-public-key: true
        
    - name: Setup SSH configuration
      run: |
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        
        # Add SSH known hosts with proper error handling
        ssh-keyscan -p 18765 -t rsa,ed25519 giow1015.siteground.us >> ~/.ssh/known_hosts 2>/dev/null || true
        ssh-keyscan -p 18765 giow1015.siteground.us >> ~/.ssh/known_hosts 2>/dev/null || true
        chmod 600 ~/.ssh/known_hosts
        
        # Configure SSH client
        cat >> ~/.ssh/config << 'EOF'
        Host giow1015.siteground.us
          HostName giow1015.siteground.us
          Port 18765
          User ${{ secrets.SSH_USER }}
          StrictHostKeyChecking no
          UserKnownHostsFile ~/.ssh/known_hosts
          IdentitiesOnly yes
          ServerAliveInterval 30
          ServerAliveCountMax 3
        EOF
        chmod 600 ~/.ssh/config
        
    - name: Test SSH Connection
      run: |
        echo "Testing SSH connection..."
        ssh -o ConnectTimeout=10 ${{ secrets.SSH_USER }}@giow1015.siteground.us "echo 'SSH connection successful' && pwd && ls -la www/terpedia.com/public_html/wp-content/plugins/ | head -5"
        
    - name: Deploy plugin to production
      run: |
        # Create clean deployment directory
        mkdir -p deploy-temp
        
        # Copy only needed files (exclude git, github, node_modules)
        rsync -av --exclude='.git*' --exclude='.github*' --exclude='node_modules' --exclude='*.log' --exclude='*.tmp' --exclude='deploy-temp' . deploy-temp/
        
        # Create deployment package from clean directory
        tar -czf terpedia-plugin.tar.gz -C deploy-temp .
        
        # Upload to server using SSH agent with enhanced options
        echo "Starting deployment to production server..."
        rsync -avz --delete --timeout=300 --progress \
          -e "ssh -o ConnectTimeout=30 -o ServerAliveInterval=30" \
          deploy-temp/ ${{ secrets.SSH_USER }}@giow1015.siteground.us:www/terpedia.com/public_html/wp-content/plugins/terpedia-plugin/
        
        echo "Upload completed. Setting permissions and activating plugin..."
        
        # Set proper permissions and activate via SSH with timeout
        ssh -o ConnectTimeout=30 -o ServerAliveInterval=30 ${{ secrets.SSH_USER }}@giow1015.siteground.us << 'EOF'
          # Navigate to plugin directory
          cd www/terpedia.com/public_html/wp-content/plugins/terpedia-plugin
          
          # Set proper permissions
          find . -type f -exec chmod 644 {} \;
          find . -type d -exec chmod 755 {} \;
          
          # Activate plugin and clear cache if WP-CLI is available
          if command -v wp &> /dev/null; then
            wp plugin activate terpedia-plugin --path=~/www/terpedia.com/public_html/ --allow-root
            wp cache flush --path=~/www/terpedia.com/public_html/ --allow-root
            wp rewrite flush --path=~/www/terpedia.com/public_html/ --allow-root
          fi
          
          echo "🚀 Plugin deployment completed successfully at $(date)"
        EOF
        
    - name: Verify deployment
      run: |
        echo "Verifying deployment..."
        ssh -o ConnectTimeout=30 ${{ secrets.SSH_USER }}@giow1015.siteground.us << 'EOF'
          # Check if plugin files exist
          if [ -f "www/terpedia.com/public_html/wp-content/plugins/terpedia-plugin/terpedia.php" ]; then
            echo "✅ Plugin files deployed successfully"
            
            # Extract version from main plugin file
            deployed_version=$(grep "Version:" "www/terpedia.com/public_html/wp-content/plugins/terpedia-plugin/terpedia.php" | head -1 | sed 's/.*Version: *//' | tr -d ' ')
            echo "📦 Deployed plugin version: $deployed_version"
            
            # Check VERSION file if it exists
            if [ -f "www/terpedia.com/public_html/wp-content/plugins/terpedia-plugin/VERSION" ]; then
              version_file_content=$(cat "www/terpedia.com/public_html/wp-content/plugins/terpedia-plugin/VERSION")
              echo "📄 Deployed VERSION file: $version_file_content"
              
              # Compare versions
              if [ "$deployed_version" = "$version_file_content" ]; then
                echo "✅ Version consistency check passed"
              else
                echo "⚠️ Version mismatch between plugin header and VERSION file"
                echo "  Plugin header: $deployed_version"
                echo "  VERSION file: $version_file_content"
              fi
            else
              echo "ℹ️ No VERSION file found on server"
            fi
            
            # Validate version format
            if [[ $deployed_version =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "✅ Deployed version format is valid: $deployed_version"
            else
              echo "❌ Invalid deployed version format: $deployed_version"
              exit 1
            fi
            
          else
            echo "❌ Plugin deployment failed - main plugin file not found"
            exit 1
          fi
          
          # Check WordPress plugin status if WP-CLI is available
          if command -v wp &> /dev/null; then
            plugin_status=$(wp plugin status terpedia-plugin --path=~/www/terpedia.com/public_html/ --allow-root)
            echo "🔌 Plugin status: $plugin_status"
            
            # Check if custom post types are registered
            post_types=$(wp post-type list --field=name --path=~/www/terpedia.com/public_html/ --allow-root | grep -E "(terpene|podcast|research)" || echo "No custom post types found")
            echo "📋 Custom post types: $post_types"
          fi
        EOF

    - name: Run plugin health checks
      run: |
        echo "Running health checks..."
        ssh -o ConnectTimeout=30 ${{ secrets.SSH_USER }}@giow1015.siteground.us << 'EOF'
          if command -v wp &> /dev/null; then
            # Check for PHP errors
            echo "🔍 Checking for PHP errors..."
            wp eval 'if (function_exists("terpedia_encyclopedia_shortcode")) { echo "✅ Plugin functions loaded\n"; } else { echo "❌ Plugin functions not loaded\n"; }' --path=~/www/terpedia.com/public_html/ --allow-root
            
            # Verify database tables exist (if plugin creates custom tables)
            echo "🗄️ Checking database integration..."
            wp eval 'global $wpdb; $tables = $wpdb->get_results("SHOW TABLES LIKE \"%terpedia%\""); echo count($tables) > 0 ? "✅ Database tables present\n" : "ℹ️ No custom tables found\n";' --path=~/www/terpedia.com/public_html/ --allow-root
            
            # Test shortcode functionality
            echo "📝 Testing shortcode functionality..."
            wp eval 'echo do_shortcode("[terpedia_encyclopedia]") ? "✅ Shortcodes working\n" : "❌ Shortcode issues\n";' --path=~/www/terpedia.com/public_html/ --allow-root
          fi
        EOF

    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "🚀 Terpedia plugin deployed successfully to production"
        else
          echo "❌ Plugin deployment failed"
        fi